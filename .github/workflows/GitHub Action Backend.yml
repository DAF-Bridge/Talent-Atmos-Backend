name: Golang Backend CI

on:
  push:
    branches: ["main", "develop-did"]
  pull_request:
    branches: ["main", "develop-did"]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Tidy Go modules
        run: go mod tidy

      - name: Clear Go module cache if needed
        run: go clean -modcache
        if: failure()

      # - name: Cache Go modules
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/go/pkg/mod
      #     key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      #     restore-keys: |
      #       ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run Unit Tests
        id: unit_test
        run: go test -tags=unit ./internal/test/unit/event_test.go
        continue-on-error: true

      - name: Check unit test result
        if: ${{ steps.unit_test.outcome != 'success' }}
        run: echo "Unit Test stage failed."
        id: unit_test_failed # Marks the test as failed if this block executes

    outputs:
      outcome: ${{ steps.unit_test.outcome }}

  integration_test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      # opensearch:
      #   image: opensearchproject/opensearch:2.0.0
      #   env:
      #     discovery.type: single-node
      #   ports:
      #     - 9200:9200
      #   options: --health-cmd "curl --show-error --fail http://localhost:9200/_cluster/health?wait_for_status=yellow"

      # minio:
      #   image: minio/minio
      #   env:
      #     MINIO_ACCESS_KEY: minio
      #     MINIO_SECRET_KEY: minio123
      #   ports:
      #     - 9000:9000
      #   options: --health-cmd "curl --show-error --fail http://localhost:9000/minio/health/ready"

    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Set environment variables for tests
        id: integration_test
        env:
          DATABASE_URL_TEST: postgres://postgres:postgres@localhost:5432/postgres?sslmode=disable
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          ELASTICSEARCH_URL: ${{ secrets.ELASTICSEARCH_URL }}
          ELASTICSEARCH_USERNAME: ${{ secrets.ELASTICSEARCH_USERNAME }}
          ELASTICSEARCH_PASSWORD: ${{ secrets.ELASTICSEARCH_PASSWORD }}

          # OPENSEARCH_URL_TEST: http://localhost:9200
          # S3_ENDPOINT: http://localhost:9000
          # S3_ACCESS_KEY: minio
          # S3_SECRET_KEY: minio123
          # S3_BUCKET_NAME: test-bucket
          # S3_BUCKET_LOCATION: us-east-1

        run: go test -tags=integration ./...
        continue-on-error: true

      - name: Check integration test result
        if: ${{ steps.integration_test.outcome != 'success' }}
        run: echo "Integration Test stage failed."
        id: integration_test_failed # Marks the test as failed if this block executes

    outputs:
      outcome: ${{ steps.integration_test.outcome }}

  build:
    runs-on: ubuntu-latest
    needs: [test, integration_test]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22
          cache: true

      - name: Build
        id: build
        run: go build -v -o app main.go
        continue-on-error: true

      - name: Check build result
        if: ${{ steps.build.outcome != 'success' }}
        run: echo "Build stage failed."
        id: build_failed

    outputs:
      build_status: ${{ steps.build.outcome }}

  notify:
    needs: [test, integration_test, build]
    runs-on: ubuntu-latest
    steps:
      - name: Send Discord notification
        run: |
          UNIT_TEST_STATUS="${{ needs.test.outputs.outcome }}"
          INTEGRATION_TEST_STATUS="${{ needs.integration_test.outputs.outcome }}"
          BUILD_STATUS="${{ needs.build.outputs.build_status }}"


          if [ "$UNIT_TEST_STATUS" != "success" ] && [ "$INTEGRATION_TEST_STATUS" != "success" ]; then
            STAGE="All Test stages"
            STATUS="failure"
          elif [ "$UNIT_TEST_STATUS" != "success" ]; then
            STAGE="Unit Test"
            STATUS="failure"
          elif [ "$INTEGRATION_TEST_STATUS" != "success" ]; then
            STAGE="Integration Test"
            STATUS="failure"
          elif [ "$BUILD_STATUS" != "success" ]; then
            STAGE="Build"
            STATUS="failure"
          else
            STAGE="All stages"
            STATUS="success"
          fi

          MESSAGE=$(cat <<EOF
          {
            "username": "GitHub Actions",
            "embeds": [{
              "title": "Workflow $STATUS - $STAGE Stage",
              "description": "Workflow: ${{ github.workflow }}\nActor: ${{ github.actor }}\nGithub-Commit-Head: ${{ github.sha }}\nBranch: ${{ github.ref_name }}\nRepository: ${{ github.repository }}\nCommit-msg: ${{ github.event.head_commit.message }}\nStatus: $STATUS\n[View Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})",
              "color": $(if [ "$STATUS" == "success" ]; then echo "3066993"; else echo "15158332"; fi)
            }]
          }
          EOF
          )

          curl -X POST \
            -H "Content-Type: application/json" \
            -d "$MESSAGE" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
